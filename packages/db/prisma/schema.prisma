// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id      String @id @default(uuid())
    title   String
    content String
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
    id                String  @id @default(uuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(uuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    password      String?
    accounts      Account[]
    sessions      Session[]
    Order         Order[]
    TelegramBot   TelegramBot[]
    Chat          Chat[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Product {
    id    String  @id @default(uuid())
    name  String
    price Float
    Order Order[]
}

model Order {
    id           String    @id @default(uuid())
    productId    String
    userId       String
    user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    price        Float
    product      Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
    Invoice      Invoice[]
    status       String    @default("CREATED")
    createdDate  DateTime  @default(now())
    modifiedDate DateTime  @default(now())
}

model Invoice {
    id            String          @id @default(uuid())
    pageUrl       String
    orderId       String
    order         Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
    ammount       Int
    status        String          @default("CREATED")
    createdDate   DateTime        @default(now())
    modifiedDate  DateTime        @default(now())
    InvoiceStatus InvoiceStatus[]
}

model InvoiceStatus {
    id           String   @id @default(uuid())
    invoiceId    String
    invoice      Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
    status       String
    modifiedDate DateTime
}

model TelegramBot {
    id             String           @id @default(uuid())
    token          String           @unique
    userId         String
    User           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    expires        DateTime?
    TelegramBotLog TelegramBotLog[]

    @@index([expires])
}

model TelegramBotLog {
    id            String      @id @default(uuid())
    telegramBotId String
    TelegramBot   TelegramBot @relation(fields: [telegramBotId], references: [id], onDelete: Cascade)
    message       String
    createdAt     DateTime    @default(now())

    @@index([createdAt])
}

model Chat {
    id         String       @id @default(uuid())
    name       String       @default("")
    token      String       @default("")
    userId     String
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    User       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    ChatDialog ChatDialog[]
}

model ChatDialog {
    id                String              @id @default(uuid())
    chatId            String
    createdAt         DateTime            @default(now())
    Chat              Chat                @relation(fields: [chatId], references: [id], onDelete: Cascade)
    ChatDialogMessage ChatDialogMessage[]
}

model ChatDialogMessage {
    id           String     @id @default(uuid())
    chatDialogId String
    type         String
    name         String
    message      String     @default("")
    image        String     @default("")
    createdAt    DateTime   @default(now())
    ChatDialog   ChatDialog @relation(fields: [chatDialogId], references: [id], onDelete: Cascade)

    @@index([type])
    @@index([createdAt])
}
